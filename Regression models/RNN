{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RNN","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO+k9tghOVPPvRBikVcoHm1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports"],"metadata":{"id":"NsancM49Ftl3"}},{"cell_type":"markdown","source":["Import libraries"],"metadata":{"id":"4UaW2lr9F0JA"}},{"cell_type":"code","source":["import pandas as pd\n","import math\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import random\n","import os\n","import pickle\n","\n","# Sklearn imports\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import KFold, train_test_split\n","\n","\n","# Tensorflow imports\n","from tensorflow import keras\n","from tensorflow.keras.layers import Dense, Dropout, SimpleRNN\n","from tensorflow.keras.callbacks import History, EarlyStopping\n","from tensorflow.keras.optimizers import Adam"],"metadata":{"id":"0zfNK_NFF2q_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["import google drive"],"metadata":{"id":"dJe04xdDFwbf"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tE9tLzo7FkLF","executionInfo":{"status":"ok","timestamp":1650721386901,"user_tz":-60,"elapsed":1613,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"outputId":"8fce3f90-dbff-4267-e309-5811db658d87"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","\n","drive_root=\"/content/drive\"\n","drive.mount(drive_root)"]},{"cell_type":"markdown","source":["Import data"],"metadata":{"id":"STD6dnnIF--e"}},{"cell_type":"code","source":["data_root = \"/content/drive/MyDrive/Dissertation/Data/\"\n","pickle_path = data_root + \"master_list.pkl\"\n","data = pd.read_csv(data_root + \"processed_psoriasis_data.csv\", header=0, index_col=0)"],"metadata":{"id":"wXnK4ceuF-mD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Pre-process data"],"metadata":{"id":"q1HX-wMnGCxW"}},{"cell_type":"code","source":["with open(pickle_path, \"rb\") as fs:\n","  master_list = pickle.load(fs)\n","\n","# Create variables of each dict element\n","globals().update(master_list)\n","\n","# Show imported columns\n","for i in master_list.keys():\n","  print(i)"],"metadata":{"id":"w42bzlJJSV1g","executionInfo":{"status":"ok","timestamp":1650721386906,"user_tz":-60,"elapsed":35,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1cbd13f-afd7-4029-b916-6380622e1e43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["continuous_cols\n","categorical_cols\n","pasi_cols\n","cont_feature_cols\n","cat_feature_cols\n","full_input_cols\n","cont_label_cols\n","cat_label_cols\n"]}]},{"cell_type":"markdown","source":["One Hot Encode categorical variables"],"metadata":{"id":"fIGnSBc5mA-s"}},{"cell_type":"code","source":["def one_hot_encode(named_cols):\n","  new_cols = []\n","  for name in named_cols:\n","    ohc_col = pd.get_dummies(data[name])\n","    # Rename cols\n","    for col_name in ohc_col.columns:\n","      # Generate new name\n","      try:\n","        new_name = f\"{name}_{int(col_name)}\"\n","      except ValueError:\n","        new_name = f\"{name}_{col_name}\"\n","\n","      # Add new data to main dataset\n","      data[new_name] = ohc_col[col_name]\n","\n","      # return new name\n","      new_cols.append(new_name)\n","      \n","  # Return new column names\n","  return new_cols"],"metadata":{"id":"XdMHZhfNmEnF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Construct input and output features"],"metadata":{"id":"arsd-JqHQnTS"}},{"cell_type":"code","source":["input_cols = pasi_cols[:3]\n","output_col = \"AVG_PASI_GRAD\""],"metadata":{"id":"HrdhM2nkQ9d_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = data[input_cols + [output_col]].sample(frac=1)\n","y = x[output_col]\n","x.drop(output_col, axis=1, inplace=True)\n","\n","x = x.to_numpy(copy=True)\n","y = y.to_numpy(copy=True)"],"metadata":{"id":"mcAZGM9YRQ1N"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Reshape data\n"],"metadata":{"id":"ROLIfD23gFhh"}},{"cell_type":"code","source":["# Reshape data for model\n","x = np.reshape(x, x.shape + (1,))"],"metadata":{"id":"mdZ68EVdgJj5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Model training and testing"],"metadata":{"id":"GFe5L68KlNmP"}},{"cell_type":"markdown","source":["Setup call back monitoring"],"metadata":{"id":"ooHj-hp6qsIT"}},{"cell_type":"code","source":["# Set to False to see the statistics of a randomised model\n","if_fit = False"],"metadata":{"id":"h7KfTd3hRriT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = History()"],"metadata":{"id":"jcKJMvwMqtvB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create model"],"metadata":{"id":"uFtbm3QBqqQr"}},{"cell_type":"code","source":["model = keras.models.Sequential([\n","    SimpleRNN(64, input_shape=(x.shape[1:])),\n","    Dense(1, activation='relu')             \n","])\n","model.build((None, x.shape[1]))"],"metadata":{"id":"td88hvpSlQL-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.compile(loss=\"mean_squared_error\",#'categorical_crossentropy', \n","              optimizer=Adam(learning_rate=1e-6),\n","              metrics=[\"mean_squared_error\", \"mean_absolute_error\"])"],"metadata":{"id":"9zuH3G43pywL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Summary\n","print(model.summary())"],"metadata":{"id":"GwKkBNJvp3UK","executionInfo":{"status":"ok","timestamp":1650721387414,"user_tz":-60,"elapsed":254,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"40611082-9b0d-4dfa-b432-5a12cb3975b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," simple_rnn (SimpleRNN)      (None, 64)                4224      \n","                                                                 \n"," dense (Dense)               (None, 1)                 65        \n","                                                                 \n","=================================================================\n","Total params: 4,289\n","Trainable params: 4,289\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"]}]},{"cell_type":"markdown","source":["Train model"],"metadata":{"id":"-WcrnQHtp37L"}},{"cell_type":"code","source":["kf = KFold(n_splits=4)\n","for train_idx, test_idx in kf.split(x):\n","  # Get splits\n","  x_train, x_test = x[train_idx], x[test_idx]\n","  y_train, y_test = y[train_idx], y[test_idx]\n","\n","  # Train model\n","  if if_fit:\n","    model.fit(x_train, y_train,\n","              batch_size=1,\n","              epochs=100,\n","              validation_split=0.1,\n","              callbacks=[history])"],"metadata":{"id":"bUnJh5cvp_0L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_history_data(history_data, test_data=None, validation=True):\n","  # Check format of optional test data\n","  if not test_data is None:\n","    assert type(test_data) == list \n","  \n","  # Gather data\n","  x_epochs = range(0, len(history_data[\"loss\"]))\n","  print(history_data.keys())\n","\n","  # Initialise graph\n","  fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(20,7))\n","  # Plot loss\n","  axs[0].plot(x_epochs, history_data[\"loss\"], label=\"Train Loss\")\n","  if validation:\n","    axs[0].plot(x_epochs, history_data[\"val_loss\"], label=\"Validation Loss\")\n","\n","  # Plot accuracy\n","  axs[1].plot(x_epochs, history_data[\"mean_squared_error\"], label=\"Train MSE\")\n","  if validation:\n","    axs[1].plot(x_epochs, history_data[\"val_mean_squared_error\"], label=\"Validation MSE\")\n","\n","  # Plot optional test data loss\n","  if not test_data is None:\n","    axs[0].hlines(test_data[0], xmin=0, xmax=max(x_epochs), label=\"Test Loss\")\n","    axs[1].hlines(test_data[1], xmin=0, xmax=max(x_epochs), label=\"Test Mean Squared Error\")\n","\n","  # Label graph\n","  axs[0].set_xlabel(\"epochs\")\n","  axs[1].set_xlabel(\"epochs\")\n","  axs[0].set_ylabel(\"Loss\")\n","  axs[1].set_ylabel(\"Mean Squared Error\")\n","  axs[0].set_title(f\"Loss over {max(x_epochs) + 1} epochs\")\n","  axs[1].set_title(f\"Mean Squared Error over {max(x_epochs) + 1} epochs\")\n","  axs[0].legend()\n","  axs[1].legend()\n","\n","  plt.show()\n"],"metadata":{"id":"Y2UjlUTY4Fwo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = history.history"],"metadata":{"id":"SqZwxCc64JFv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if if_fit:\n","  plot_history_data(history)"],"metadata":{"id":"OdaH-8ef5OXX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Generate a report"],"metadata":{"id":"aw7xs4Kn9a8k"}},{"cell_type":"code","source":["from sklearn.metrics import  mean_absolute_error, mean_squared_error, mean_absolute_percentage_error\n","def regression_report(y_pred, y_true):\n","  report = {}\n","  report[\"MAPE\"] = mean_absolute_percentage_error(y_pred, y_true)\n","  report[\"MAE\"] = mean_absolute_error(y_pred, y_true)\n","  report[\"RMSE\"] = mean_squared_error(y_pred, y_true, squared=False)\n","  return report"],"metadata":{"id":"nAE-8Eyk9cs6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Plot predictions against true values"],"metadata":{"id":"z8SAIOyG4LlR"}},{"cell_type":"code","source":["y_pred = model.predict(x)\n","\n","plt.scatter(range(0, len(y_pred)), y_pred, label=\"Prediction\")\n","plt.scatter(range(0, len(y_pred)), y, label=\"Test\")\n","plt.legend()"],"metadata":{"id":"v_r3vlr34LxF","executionInfo":{"status":"ok","timestamp":1650721389063,"user_tz":-60,"elapsed":1356,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"colab":{"base_uri":"https://localhost:8080/","height":282},"outputId":"035d092d-ed36-4b58-c94a-fa82034281d9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7fddfef0cdd0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["y_pred = np.reshape(y_pred, y_pred.shape[:1])\n","\n","regression_report(y, y_pred)"],"metadata":{"id":"muJqJkuj7xdT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650721389068,"user_tz":-60,"elapsed":19,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"outputId":"26d60931-8a71-4ec8-f18f-6e0b7c82df3e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'MAE': 0.1796135570292358,\n"," 'RMSE': 0.22121843647203812,\n"," 'r2_score': -0.6848504545757401}"]},"metadata":{},"execution_count":20}]}]}