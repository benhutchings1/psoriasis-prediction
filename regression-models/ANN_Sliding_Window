{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ANN_Sliding_Window","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNP/MDgv7TQkd3WeAmsOgT1"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Imports"],"metadata":{"id":"NsancM49Ftl3"}},{"cell_type":"markdown","source":["Import libraries"],"metadata":{"id":"4UaW2lr9F0JA"}},{"cell_type":"code","source":["import pandas as pd\n","import math\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import random\n","import os\n","import pickle \n","\n","# Sklearn imports\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.metrics import *\n","from sklearn.model_selection import KFold\n","\n","# Tensorflow imports\n","from tensorflow import keras\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.callbacks import History, EarlyStopping\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.losses import MeanAbsolutePercentageError"],"metadata":{"id":"0zfNK_NFF2q_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["import google drive"],"metadata":{"id":"dJe04xdDFwbf"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"tE9tLzo7FkLF"},"outputs":[],"source":["from google.colab import drive\n","\n","drive_root=\"/content/drive\"\n","drive.mount(drive_root)"]},{"cell_type":"markdown","source":["Import data"],"metadata":{"id":"STD6dnnIF--e"}},{"cell_type":"code","source":["data_root = \"/content/drive/MyDrive/Dissertation/Data/\"\n","data = pd.read_csv(data_root + \"processed_psoriasis_data.csv\", header=0, index_col=0)\n","pickle_path = data_root + \"master_list.pkl\""],"metadata":{"id":"wXnK4ceuF-mD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Import columns classifications"],"metadata":{"id":"kwGu5a4ct3Rn"}},{"cell_type":"code","source":["with open(pickle_path, \"rb\") as fs:\n","  master_list = pickle.load(fs)\n","\n","# Create variables of each dict element\n","globals().update(master_list)\n","\n","# Show imported columns\n","for i in master_list.keys():\n","  print(i)"],"metadata":{"id":"DURbjn70t6Rw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Pre-process data"],"metadata":{"id":"q1HX-wMnGCxW"}},{"cell_type":"markdown","source":["One Hot Encode categorical variables"],"metadata":{"id":"fIGnSBc5mA-s"}},{"cell_type":"code","source":["def one_hot_encode(named_cols):\n","  new_cols = []\n","  for name in named_cols:\n","    ohc_col = pd.get_dummies(data[name])\n","    # Rename cols\n","    for col_name in ohc_col.columns:\n","      # Generate new name\n","      try:\n","        new_name = f\"{name}_{int(col_name)}\"\n","      except ValueError:\n","        new_name = f\"{name}_{col_name}\"\n","\n","      # Add new data to main dataset\n","      data[new_name] = ohc_col[col_name]\n","\n","      # return new name\n","      new_cols.append(new_name)\n","      \n","  # Return new column names\n","  return new_cols"],"metadata":{"id":"XdMHZhfNmEnF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["full_input = False\n","\n","if full_input:\n","  input_cols = pasi_cols[:3] + cont_feature_cols\n","  input_cols += one_hot_encode(cat_feature_cols)\n","\n","else:\n","  input_cols = pasi_cols[:3] + ['BMI']\n","  x_cat_cols = ['CLASS', 'SEASONAL_FLARE', 'SKIN_TYPE', 'SMOKING', 'ALCOHOL', 'SEX']\n","  input_cols += one_hot_encode(x_cat_cols)"],"metadata":{"id":"TusU4m6Jug1B"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Generate sliding window input/output data"],"metadata":{"id":"ZkKwZAwMzkOx"}},{"cell_type":"code","source":["# Window size includes the input values and the label value\n","# e.g. 1, 2 -> 3 (input x2) -> (label)\n","input_size = 3\n","window_size = input_size + 1\n","assert window_size > 1"],"metadata":{"id":"Dk03-4jPmE_1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def find_end_point(seq):\n","  for i, val in enumerate(reversed(seq)):\n","    if not math.isnan(val):\n","      return len(seq) - i - 1"],"metadata":{"id":"lDD5ySe653Jd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# index of window sample, label, inputs (as list)\n","idx_y_x = []\n","\n","for pasi_vals in data[pasi_cols].iterrows():\n","  idx = pasi_vals[0]\n","  pasi_vals = pasi_vals[1].values\n","\n","  # Iterate through all non NaN vals in sequence\n","  for i in range(window_size - 1, find_end_point(pasi_vals) + 1):\n","    y = pasi_vals[i]\n","    x = []\n","    # Iterate through previous values to get inputs\n","    for j in reversed(range(0, window_size-1)):\n","      x.append(pasi_vals[i - j - 1])\n","      \n","    idx_y_x.append((idx, y, x))\n"],"metadata":{"id":"OcRFoS0R3T0U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Input structure\n","print(\"Inputs to network\")\n","print(list(enumerate([f\"PASI VAL {n}\" for n in range(input_size)] + input_cols)))\n","\n","# Instansiate data input arrays\n","x = np.zeros(shape=(len(idx_y_x), input_size + len(input_cols)))\n","y = np.zeros(shape=len(idx_y_x))\n","\n","count = 0\n","for x_i,(idx, y_val, x_val) in zip(x,idx_y_x):\n","  \n","  # get data row from idx\n","  data_row = data.iloc[idx]\n","\n","  # fill previous pasi val\n","  x_i[0:input_size] = x_val\n","\n","  # fill label\n","  y[count] = y_val\n","  \n","  # Fill categorical values\n","  x_i[input_size:] = data_row[input_cols]\n","\n","  count += 1\n"],"metadata":{"id":"E1U4xDCGWS71"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Model Creation and Training"],"metadata":{"id":"IHyD4setdaAE"}},{"cell_type":"markdown","source":["Setup monitoring call backs"],"metadata":{"id":"a36B8kVN3yLV"}},{"cell_type":"code","source":["history = History()"],"metadata":{"id":"F8Oh3SVL3oKz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Create model structure"],"metadata":{"id":"crUUe3ZzdfCQ"}},{"cell_type":"code","source":["model = keras.models.Sequential([\n","    Dense(x.shape[1], activation='relu'),\n","    Dense(64),\n","    Dense(32),\n","    Dense(16),\n","    Dense(8),\n","    # Sigmoid activation to predict values between 0 and 1\n","    Dense(1, activation='sigmoid')\n","])\n","model.build((None, x.shape[1]))"],"metadata":{"id":"wObxjMrai9vk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"id":"E8cL2iDa0qwB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Compile model"],"metadata":{"id":"QnaOiHwbjypL"}},{"cell_type":"code","source":["model.compile(loss='mean_squared_error', \n","              optimizer=Adam(lr=1e-5),\n","              metrics=[\"mean_squared_error\", \"mean_absolute_error\"])"],"metadata":{"id":"ExwojWRCk3qv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Train/evaluate model using K-Fold cross validationa"],"metadata":{"id":"6qAikd0NcHuL"}},{"cell_type":"code","source":["# Set to False to see the statistics of a randomised model\n","if_fit = False\n","# Take 10% for validation\n","val_split_idx = round(len(x) * 0.1)\n","x_val = x[:val_split_idx]\n","y_val = y[:val_split_idx]\n","\n","x_cv = x[val_split_idx:]\n","y_cv = y[val_split_idx:]\n","\n","kf = KFold(n_splits=4)\n","for train_idx, test_idx in kf.split(x_cv):\n","  # Get splits\n","  x_train, x_test = x_cv[train_idx], x_cv[test_idx]\n","  y_train, y_test = y_cv[train_idx], y_cv[test_idx]\n","\n","  # Train model\n","  if if_fit:\n","    model.fit(x_train, y_train,\n","              batch_size=5,\n","              epochs=25,\n","              validation_data=(x_val,y_val),\n","              callbacks=[history])"],"metadata":{"id":"6F8tLBya00Ee"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_history_data(history_data):\n","  # Check format of optional test data\n","\n","  # Gather data\n","  x_epochs = range(0, len(history_data[\"loss\"]))\n","\n","  # Initialise graph\n","  fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(20,7))\n","  # Plot loss\n","  axs[0].plot(x_epochs, history_data[\"loss\"], label=\"Train Loss\")\n","  axs[0].plot(x_epochs, history_data[\"val_loss\"], label=\"Validation Loss\")\n","\n","  # Plot accuracy\n","  axs[1].plot(x_epochs, history_data[\"mean_squared_error\"], label=\"Train MSE\")\n","  axs[1].plot(x_epochs, history_data[\"val_mean_squared_error\"], label=\"Validation MSE\")\n","\n","  # Label graph\n","  axs[0].set_xlabel(\"epochs\")\n","  axs[1].set_xlabel(\"epochs\")\n","  axs[0].set_ylabel(\"Loss\")\n","  axs[1].set_ylabel(\"Mean Squared Error\")\n","  axs[0].set_title(f\"Loss over {max(x_epochs) + 1} epochs\")\n","  axs[1].set_title(f\"Mean Squared Error over {max(x_epochs) + 1} epochs\")\n","  axs[0].legend()\n","  axs[1].legend()\n","\n","  plt.show()"],"metadata":{"id":"Y2UjlUTY4Fwo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = history.history"],"metadata":{"id":"SqZwxCc64JFv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if if_fit:\n","  plot_history_data(history)"],"metadata":{"id":"OdaH-8ef5OXX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Generate a report"],"metadata":{"id":"aw7xs4Kn9a8k"}},{"cell_type":"code","source":["from sklearn.metrics import  mean_absolute_error, mean_squared_error, mean_absolute_percentage_error\n","def regression_report(y_pred, y_true):\n","  report = {}\n","  report[\"MAPE\"] = mean_absolute_percentage_error(y_pred, y_true)\n","  report[\"MAE\"] = mean_absolute_error(y_pred, y_true)\n","  report[\"RMSE\"] = mean_squared_error(y_pred, y_true, squared=False)\n","  return report"],"metadata":{"id":"nAE-8Eyk9cs6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Plot predictions against true values"],"metadata":{"id":"z8SAIOyG4LlR"}},{"cell_type":"code","source":["y_pred = model.predict(x_test)\n","\n","plt.scatter(range(0, len(y_pred)), y_pred, label=\"Prediction\")\n","plt.scatter(range(0, len(y_pred)), y_test, label=\"True\")\n","plt.legend()"],"metadata":{"id":"v_r3vlr34LxF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["regression_report(y_pred, y_test)"],"metadata":{"id":"muJqJkuj7xdT"},"execution_count":null,"outputs":[]}]}