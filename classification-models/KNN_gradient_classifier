{"cells":[{"cell_type":"markdown","metadata":{"id":"NsancM49Ftl3"},"source":["# Imports"]},{"cell_type":"markdown","metadata":{"id":"4UaW2lr9F0JA"},"source":["Import libraries"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"0zfNK_NFF2q_","executionInfo":{"status":"ok","timestamp":1652297447697,"user_tz":-60,"elapsed":213,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"outputs":[],"source":["import pandas as pd\n","import math\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import random\n","import os\n","import pickle \n","import re\n","\n","# Sklearn imports\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.metrics import *\n","from sklearn.model_selection import KFold, train_test_split\n","from sklearn.neighbors import KNeighborsClassifier"]},{"cell_type":"markdown","metadata":{"id":"dJe04xdDFwbf"},"source":["import google drive"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20129,"status":"ok","timestamp":1652297468038,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"},"user_tz":-60},"id":"tE9tLzo7FkLF","outputId":"05c0da0a-d029-4380-8ffe-8cb1873fb77c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive_root=\"/content/drive\"\n","drive.mount(drive_root)"]},{"cell_type":"markdown","metadata":{"id":"STD6dnnIF--e"},"source":["Import data"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"wXnK4ceuF-mD","executionInfo":{"status":"ok","timestamp":1652297468359,"user_tz":-60,"elapsed":345,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"outputs":[],"source":["data_root = \"/content/drive/MyDrive/Dissertation/Data/\"\n","pickle_path = data_root + \"master_list.pkl\"\n","data = pd.read_csv(data_root + \"processed_psoriasis_data.csv\", header=0, index_col=0)"]},{"cell_type":"markdown","metadata":{"id":"q1HX-wMnGCxW"},"source":["# Pre-process data"]},{"cell_type":"markdown","source":["Read in pickled master list of columns"],"metadata":{"id":"lueuJqQFkTRW"}},{"cell_type":"code","source":["with open(pickle_path, \"rb\") as fs:\n","  master_list = pickle.load(fs)\n","\n","# Create variables of each dict element\n","globals().update(master_list)\n","\n","# Show imported columns\n","for i in master_list.keys():\n","  print(i)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4c0hYDAkkRNC","executionInfo":{"status":"ok","timestamp":1652297468619,"user_tz":-60,"elapsed":277,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"outputId":"7ac801f2-e521-493d-d31f-51f477c825ef"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["continuous_cols\n","categorical_cols\n","pasi_cols\n","cont_feature_cols\n","cat_feature_cols\n","cont_label_cols\n","cat_label_cols\n","curated_feature_cols\n","ohc_curated_feat_cols\n","ohc_feature_cols\n","ohc_label_cols\n"]}]},{"cell_type":"markdown","source":["Construct input features"],"metadata":{"id":"_b17FA2QwONB"}},{"cell_type":"code","source":["# Use curated features or full features \n","curated = True"],"metadata":{"id":"eDzrIUXJBe3J","executionInfo":{"status":"ok","timestamp":1652297468622,"user_tz":-60,"elapsed":29,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["if curated:\n","  input_cols = pasi_cols[:3] + curated_feature_cols\n","else:\n","  input_cols = pasi_cols[:3] + cat_feature_cols + cont_feature_cols\n","\n","output_col = [\"AVG_PASI_GRAD_CLASS\"]"],"metadata":{"id":"6iyAll1jBfl6","executionInfo":{"status":"ok","timestamp":1652297468623,"user_tz":-60,"elapsed":23,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P1gAbYSqPBue"},"source":["  \n","\n","Extract all input data"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"D2SDcHKfKuSx","executionInfo":{"status":"ok","timestamp":1652297468624,"user_tz":-60,"elapsed":21,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"outputs":[],"source":["# Shuffle data and extract input output arrays\n","x = data[input_cols + output_col].sample(frac=1)\n","y = x[output_col]\n","x.drop(output_col, axis=1, inplace=True)\n","\n","x = x.to_numpy(copy=True)\n","y = y.to_numpy(copy=True)\n","y=np.reshape(y, len(y))"]},{"cell_type":"markdown","metadata":{"id":"IHyD4setdaAE"},"source":["# Model Creation and Training"]},{"cell_type":"markdown","source":["Evaluation"],"metadata":{"id":"RdRe8YjgJyJ2"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","def classification_report(true, pred, average=None):\n","  if average is None:\n","    average = \"weighted\"\n","  out = {}\n","  out[\"Accuracy\"] = accuracy_score(true, pred)\n","  out[\"Precision\"] = precision_score(true, pred, average=average, zero_division=1)\n","  out[\"Recall\"] = recall_score(true, pred, average=average, zero_division=1)\n","  out[\"F1 Score\"] = f1_score(true, pred, average=average)\n","  return out"],"metadata":{"id":"bIKAUZmAJzJZ","executionInfo":{"status":"ok","timestamp":1652297468625,"user_tz":-60,"elapsed":19,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["Fit many samples of k over many iterations"],"metadata":{"id":"eanG_d2mD5qx"}},{"cell_type":"code","source":["# Establish number of fits\n","# iter_kfold * kfolds\n","iter_kfold = 1\n","kfolds = 6\n","k_neighbours = 20\n","\n","# Store values\n","acc_vals = []\n","f1_vals = []\n","\n","for i in range(iter_kfold):\n","  kf = KFold(n_splits=kfolds, shuffle=True)\n","\n","  # Run group iteration\n","  for train_idx, test_idx in kf.split(x):\n","    # Split data\n","    x_train, x_test = x[train_idx], x[test_idx]\n","    y_train, y_test = y[train_idx], y[test_idx]\n","\n","    # Test range of neighbours\n","    iter_acc = []\n","    iter_f1 = []\n","    for k in range(2, k_neighbours):\n","      # define model\n","      model = KNeighborsClassifier(n_neighbors=k)\n","\n","      # Fit model\n","      model.fit(x_train, y_train)\n","\n","      # Predict\n","      y_pred = model.predict(x_test)\n","\n","      # Evaluate\n","      eval = classification_report(y_test, y_pred, average=\"weighted\")\n","      iter_acc.append(eval[\"Accuracy\"])\n","      iter_f1.append(eval[\"F1 Score\"])\n","    acc_vals.append(iter_acc)\n","    f1_vals.append(iter_f1)"],"metadata":{"id":"6VOT4LXQD45w","executionInfo":{"status":"ok","timestamp":1652297469247,"user_tz":-60,"elapsed":640,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["acc_vals = np.array(acc_vals)\n","f1_vals = np.array(f1_vals)"],"metadata":{"id":"I9el2TxpKuqb","executionInfo":{"status":"ok","timestamp":1652297469250,"user_tz":-60,"elapsed":31,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["Plot accuracy over k neighbours"],"metadata":{"id":"5JRBE6OsUGUD"}},{"cell_type":"code","source":["mean_acc = []\n","mean_f1 = []\n","\n","for i in range(len(acc_vals[0])):\n","  mean_acc.append(np.mean(acc_vals[:, i]))\n","  mean_f1.append(np.mean(f1_vals[:, i]))"],"metadata":{"id":"NdNPJ4tBK2T9","executionInfo":{"status":"ok","timestamp":1652297469251,"user_tz":-60,"elapsed":27,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["x_ticks = list(range(2, k_neighbours))\n","\n","plt.plot(x_ticks, mean_acc, \"b\", label=\"Accuracy\", marker=\"o\")\n","plt.plot(x_ticks, mean_f1, \"r\", label=\"F1 Score\", marker=\"o\")\n","plt.grid()\n","plt.xticks(x_ticks, x_ticks)\n","\n","if curated:\n","  plt.title(\"Curated Set KNN Metrics\")\n","else:\n","  plt.title(\"Full Set KNN metrics\")\n","plt.xlabel(\"K\")\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"0QqbTbehLT5F","executionInfo":{"status":"ok","timestamp":1652297469660,"user_tz":-60,"elapsed":431,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"outputId":"555373f4-b518-4a90-dfa5-09d6e331c337"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f4358945f10>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Get best value of k"],"metadata":{"id":"VVSIWyhaUeGd"}},{"cell_type":"code","source":["k_best = 6"],"metadata":{"id":"qYZ7DzmbUdSw","executionInfo":{"status":"ok","timestamp":1652297469665,"user_tz":-60,"elapsed":36,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["Full Eval of Best KNN"],"metadata":{"id":"j03iySLb4ltq"}},{"cell_type":"code","source":["# Establish number of fits\n","# iter_kfold * kfolds\n","iter_kfold = 100\n","kfolds = 6\n","\n","# Store values\n","acc_vals = []\n","f1_vals = []\n","precision_vals = []\n","recall_vals = []\n","\n","for i in range(iter_kfold):\n","  kf = KFold(n_splits=kfolds, shuffle=True)\n","\n","  # Run group iteration\n","  for train_idx, test_idx in kf.split(x):\n","    # Split data\n","    x_train, x_test = x[train_idx], x[test_idx]\n","    y_train, y_test = y[train_idx], y[test_idx]\n","\n","    # define model\n","    model = KNeighborsClassifier(n_neighbors=k_best)\n","\n","    # Fit model\n","    model.fit(x_train, y_train)\n","\n","    # Predict\n","    y_pred = model.predict(x_test)\n","\n","    # Evaluate\n","    eval = classification_report(y_test, y_pred, average=\"weighted\")\n","\n","    acc_vals.append(eval[\"Accuracy\"])\n","    f1_vals.append(eval[\"F1 Score\"])\n","    precision_vals.append(eval[\"Precision\"])\n","    recall_vals.append(eval[\"Recall\"])"],"metadata":{"id":"bPS78ZQo4qjJ","executionInfo":{"status":"ok","timestamp":1652297472034,"user_tz":-60,"elapsed":2401,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["print(np.mean(acc_vals))\n","print(np.mean(f1_vals))\n","print(np.mean(precision_vals))\n","print(np.mean(recall_vals))"],"metadata":{"id":"cOqOkUGb5Jkq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1652297472035,"user_tz":-60,"elapsed":29,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"outputId":"9b7ea5cf-cfc5-4ef2-cd8c-79d57a7236f9"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["0.31302083333333336\n","0.3077898754805924\n","0.3864868629634255\n","0.31302083333333336\n"]}]},{"cell_type":"markdown","source":["Fit random model"],"metadata":{"id":"PIkppKLnTlbq"}},{"cell_type":"code","source":["# Random inputs to model to build neighbours\n","N = k_best\n","knn = KNeighborsClassifier(n_neighbors=N)\n","x_rand = np.random.random(x_train.shape)\n","y_rand = np.random.randint(low=0, high=2, size=len(y_train))\n","knn.fit(x_rand, y_rand)\n","y_pred = knn.predict(x_test)\n","print(classification_report(y_test, y_pred))"],"metadata":{"id":"Y8mJjQtLavXj","executionInfo":{"status":"ok","timestamp":1652297472036,"user_tz":-60,"elapsed":22,"user":{"displayName":"Ben Hutchings","userId":"08068466303164555180"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1a776f87-9792-460e-ac94-21ab840387f8"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Accuracy': 0.375, 'Precision': 0.5476190476190477, 'Recall': 0.375, 'F1 Score': 0.3153846153846154}\n"]}]}],"metadata":{"colab":{"name":"KNN_gradient_classifier","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMbl/deonj3RkP8sGeUeRO/"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}